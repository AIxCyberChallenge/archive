name: PR Preview

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Git
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Build site
      run: bundle exec jekyll build
      env:
        JEKYLL_ENV: production
        
    - name: Setup Node.js for screenshot
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install chromium
        
    - name: Start Jekyll server in background
      run: |
        bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
        sleep 5  # Wait for server to start
        
    - name: Take screenshot
      run: |
        # Take a screenshot optimized for GitHub display
        npx playwright screenshot \
          --wait-for-selector="body" \
          --viewport-size=1280,720 \
          http://localhost:4000 \
          screenshot.png
          
        # Optimize the image for GitHub display (max 10MB, good quality)
        if command -v convert >/dev/null 2>&1; then
          convert screenshot.png -quality 85 -resize 1200x800\> screenshot_optimized.png
          mv screenshot_optimized.png screenshot.png
        fi
        
    - name: Upload screenshot artifact
      uses: actions/upload-artifact@v4
      with:
        name: preview-screenshot-${{ github.event.pull_request.number }}
        path: screenshot.png
        retention-days: 7

    - name: Upload screenshot and create comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          const run_id = context.runId;
          
          // Read the screenshot
          const imageBuffer = fs.readFileSync('screenshot.png');
          
          // Upload using GitHub's attachments API (same as drag & drop in UI)
          const FormData = require('form-data');
          const form = new FormData();
          form.append('file', imageBuffer, {
            filename: 'screenshot.png',
            contentType: 'image/png'
          });
          
          const uploadResponse = await fetch(`https://github.com/${owner}/${repo}/upload/policies/assets`, {
            method: 'POST',
            headers: {
              'Authorization': `token ${{ secrets.GITHUB_TOKEN }}`,
              'Accept': 'application/vnd.github.v3+json',
              ...form.getHeaders()
            },
            body: form
          });
          
          if (!uploadResponse.ok) {
            throw new Error(`Upload failed: ${uploadResponse.status}`);
          }
          
          const uploadData = await uploadResponse.json();
          const imageUrl = uploadData.asset.url;
          
          // Delete any existing preview comments
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pull_number,
          });
          
          const existingComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üñºÔ∏è Archive Preview')
          );
          
          for (const comment of existingComments) {
            await github.rest.issues.deleteComment({
              owner,
              repo,
              comment_id: comment.id,
            });
          }
          
          // Create the comment with the uploaded image
          const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${run_id}`;
          
          const commentBody = [
            "## üñºÔ∏è Archive Preview",
            "",
            `![Archive Preview](${imageUrl})`,
            "",
            "**Local Development:**",
            "```bash",
            "make serve",
            "# Visit http://localhost:4000",
            "```",
            "",
            `üì• [Download Full Resolution](${artifactUrl}) (Artifacts ‚Üí \`preview-screenshot-${pull_number}\`)`
          ].join('\n');
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pull_number,
            body: commentBody
          });