name: PR Preview

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Build site
      run: bundle exec jekyll build
      env:
        JEKYLL_ENV: production
        
    - name: Setup Node.js for screenshot
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install chromium
        
    - name: Start Jekyll server in background
      run: |
        bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
        sleep 5  # Wait for server to start
        
    - name: Take screenshot
      run: |
        # Take a screenshot optimized for GitHub display
        npx playwright screenshot \
          --wait-for-selector="body" \
          --viewport-size=1280,720 \
          http://localhost:4000 \
          screenshot.png
          
        # Optimize the image for GitHub display (max 10MB, good quality)
        if command -v convert >/dev/null 2>&1; then
          convert screenshot.png -quality 85 -resize 1200x800\> screenshot_optimized.png
          mv screenshot_optimized.png screenshot.png
        fi
        
    - name: Upload screenshot artifact
      uses: actions/upload-artifact@v4
      with:
        name: preview-screenshot-${{ github.event.pull_request.number }}
        path: screenshot.png
        retention-days: 7
    - name: Upload screenshot and post PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          const run_id = context.runId;
          
          // Delete any previous preview comments first
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pull_number,
          });
          
          const botComments = comments.data.filter(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üñºÔ∏è PR Preview')
          );
          
          for (const comment of botComments) {
            await github.rest.issues.deleteComment({
              owner,
              repo,
              comment_id: comment.id,
            });
          }
          
          // Read the screenshot file
          const screenshotPath = 'screenshot.png';
          const imageBuffer = fs.readFileSync(screenshotPath);
          
          try {
            // Use GitHub's user content API to upload the image
            const imageBase64 = imageBuffer.toString('base64');
            
            // Create the file in a temporary location using GitHub's content API
            const tempFileName = `preview-${pull_number}-${Date.now()}.png`;
            const uploadResponse = await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: `.github/temp/${tempFileName}`,
              message: `Add preview screenshot for PR #${pull_number}`,
              content: imageBase64,
              branch: context.payload.pull_request.head.ref
            });
            
            // Construct the raw GitHub URL for the uploaded file
            const imageUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${context.payload.pull_request.head.ref}/.github/temp/${tempFileName}`;
            
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            const body = [
              "## üñºÔ∏è PR Preview",
              "",
              "Here's how the site looks with your changes:",
              "",
              `![Website Preview](${imageUrl})`,
              "",
              "**Local Preview:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              `üì∏ [Download Full Resolution](${artifactUrl}) (Artifacts ‚Üí \`preview-screenshot-${pull_number}\`)`,
              "",
              "---",
              `*Generated by [GitHub Actions Run ${run_id}](${artifactUrl})*`
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: body
            });
            
          } catch (error) {
            console.error('Failed to upload image:', error);
            
            // Fallback to artifact download only
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            const fallbackBody = [
              "## üñºÔ∏è PR Preview",
              "",
              "Preview screenshot is ready:",
              "",
              `üì∏ **[Download Screenshot](${artifactUrl})**`,
              "‚Üí Click \"Artifacts\" ‚Üí Download \`preview-screenshot-${pull_number}\`",
              "",
              "**Local Preview:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              "---",
              `*Generated by [GitHub Actions Run ${run_id}](${artifactUrl})*`
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: fallbackBody
            });
          }
          
    - name: Stop Jekyll server
      run: |
        pkill -f jekyll || true
