name: PR Preview

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Git
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Build site
      run: bundle exec jekyll build
      env:
        JEKYLL_ENV: production
        
    - name: Setup Node.js for screenshot
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install chromium
        
    - name: Start Jekyll server in background
      run: |
        bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
        sleep 5  # Wait for server to start
        
    - name: Take screenshot
      run: |
        # Take a screenshot optimized for GitHub display
        npx playwright screenshot \
          --wait-for-selector="body" \
          --viewport-size=1280,720 \
          http://localhost:4000 \
          screenshot.png
          
        # Optimize the image for GitHub display (max 10MB, good quality)
        if command -v convert >/dev/null 2>&1; then
          convert screenshot.png -quality 85 -resize 1200x800\> screenshot_optimized.png
          mv screenshot_optimized.png screenshot.png
        fi
        
    - name: Upload screenshot artifact
      uses: actions/upload-artifact@v4
      id: upload-png
      with:
        name: preview-screenshot-${{ github.event.pull_request.number }}
        path: screenshot.png
        if-no-files-found: error
        retention-days: 7
        
    - name: Find Comment
      id: find-comment
      uses: peter-evans/find-comment@v3
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: 'Archive Preview'

    # Upload image and create comment using a more reliable method
    - name: Create or Update PR Comment with Image
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          const run_id = context.runId;
          
          // First, create a temporary comment to upload the image
          const imageBuffer = fs.readFileSync('screenshot.png');
          const imageBase64 = imageBuffer.toString('base64');
          
          // Create a temp comment to get GitHub to host the image
          const tempComment = await github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pull_number,
            body: `![temp](data:image/png;base64,${imageBase64.substring(0, 30000)})` // Truncate to avoid size issues
          });
          
          // Wait a moment for GitHub to process
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Get the updated comment to extract the GitHub-hosted URL
          const updatedTempComment = await github.rest.issues.getComment({
            owner,
            repo,
            comment_id: tempComment.data.id,
          });
          
          // Extract GitHub's image URL
          const githubImageMatch = updatedTempComment.data.body.match(/https:\/\/github\.com\/.*?\.png/);
          let imageUrl = null;
          
          if (githubImageMatch) {
            imageUrl = githubImageMatch[0];
          }
          
          // Delete the temp comment
          await github.rest.issues.deleteComment({
            owner,
            repo,
            comment_id: tempComment.data.id,
          });
          
          const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          
          let commentBody;
          if (imageUrl) {
            commentBody = [
              "## üñºÔ∏è Archive Preview",
              "",
              `![Archive Preview](${imageUrl})`,
              "",
              "**Local Development:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              `üì• [Download Full Resolution](${artifactUrl}) (Artifacts ‚Üí \`preview-screenshot-${pull_number}\`)`
            ].join('\n');
          } else {
            // Fallback if image upload failed
            commentBody = [
              "## üñºÔ∏è Archive Preview",
              "",
              "Screenshot generated successfully!",
              "",
              "**Local Development:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              `üì• [Download Screenshot](${artifactUrl}) (Artifacts ‚Üí \`preview-screenshot-${pull_number}\`)`
            ].join('\n');
          }
          
          // Check if we need to update existing comment
          const existingCommentId = '${{ steps.find-comment.outputs.comment-id }}';
          
          if (existingCommentId) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingCommentId,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: commentBody
            });
          }