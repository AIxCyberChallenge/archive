name: PR Preview

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install dependencies
      run: bundle install
      
    - name: Build site
      run: bundle exec jekyll build
      env:
        JEKYLL_ENV: production
        
    - name: Setup Node.js for screenshot
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        npx playwright install chromium
        
    - name: Start Jekyll server in background
      run: |
        bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
        sleep 5  # Wait for server to start
        
    - name: Take screenshot
      run: |
        # Take a screenshot optimized for GitHub display
        npx playwright screenshot \
          --wait-for-selector="body" \
          --viewport-size=1280,720 \
          http://localhost:4000 \
          screenshot.png
          
        # Optimize the image for GitHub display (max 10MB, good quality)
        if command -v convert >/dev/null 2>&1; then
          convert screenshot.png -quality 85 -resize 1200x800\> screenshot_optimized.png
          mv screenshot_optimized.png screenshot.png
        fi
        
    - name: Upload screenshot artifact
      uses: actions/upload-artifact@v4
      with:
        name: preview-screenshot-${{ github.event.pull_request.number }}
        path: screenshot.png
        retention-days: 7
    - name: Upload image to GitHub and post PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          const run_id = context.runId;
          
          // Read the screenshot file
          const screenshotPath = 'screenshot.png';
          const imageBuffer = fs.readFileSync(screenshotPath);
          const imageBase64 = imageBuffer.toString('base64');
          
          try {
            // Upload the image to GitHub's asset storage
            // This uses GitHub's undocumented but widely-used image upload endpoint
            const uploadResponse = await github.request('POST /repos/{owner}/{repo}/releases/assets', {
              owner,
              repo,
              url: `https://uploads.github.com/repos/${owner}/${repo}/releases/assets`,
              headers: {
                'Content-Type': 'image/png',
                'Content-Length': imageBuffer.length
              },
              data: imageBuffer,
              name: `preview-${pull_number}-${Date.now()}.png`
            }).catch(async (error) => {
              // Fallback: Use GitHub's attachment upload via issue creation
              console.log('Release asset upload failed, trying issue attachment...');
              
              // Create a temporary comment with the image to get GitHub URL
              const tempComment = await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pull_number,
                body: `![Preview](data:image/png;base64,${imageBase64})`
              });
              
              // Extract the GitHub-generated URL from the comment
              const commentBody = tempComment.data.body;
              const githubUrlMatch = commentBody.match(/https:\/\/github\.com\/.*?\.png/);
              
              if (githubUrlMatch) {
                // Delete the temporary comment
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: tempComment.data.id,
                });
                
                return { data: { browser_download_url: githubUrlMatch[0] } };
              }
              
              throw error;
            });
            
            const imageUrl = uploadResponse.data.browser_download_url || uploadResponse.data.url;
            
            // Delete any previous preview comments
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: pull_number,
            });
            
            const botComments = comments.data.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üñºÔ∏è PR Preview')
            );
            
            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }
            
            // Create the new comment with the hosted image
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            const body = [
              "## üñºÔ∏è PR Preview",
              "",
              "Here's how the site looks with your changes:",
              "",
              `![Website Preview](${imageUrl})`,
              "",
              "**Local Preview:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              `üì∏ **[Download Full Resolution](${artifactUrl})** (Click "Artifacts" ‚Üí \`preview-screenshot-${pull_number}\`)`,
              "",
              "---",
              `*Generated by [GitHub Actions Run ${run_id}](${artifactUrl})*`
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: body
            });
            
          } catch (error) {
            console.error('Failed to upload image:', error);
            
            // Ultimate fallback: Post comment without image
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
            
            const fallbackBody = [
              "## üñºÔ∏è PR Preview",
              "",
              "Here's how the site looks with your changes:",
              "",
              `üì∏ **[Download Screenshot](${artifactUrl})**`,
              `‚Üí Click "Artifacts" ‚Üí Download \`preview-screenshot-${pull_number}\``,
              "",
              "**Local Preview:**",
              "```bash",
              "make serve",
              "# Visit http://localhost:4000",
              "```",
              "",
              "---",
              `*Generated by [GitHub Actions Run ${run_id}](${artifactUrl})*`,
              "*(Image preview temporarily unavailable)*"
            ].join('\n');
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: fallbackBody
            });
          }
          
    - name: Stop Jekyll server
      run: |
        pkill -f jekyll || true
